"use strict";(self.webpackChunkriasc=self.webpackChunkriasc||[]).push([[3831],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=a,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(h,i(i({ref:t},p),{},{components:n})):r.createElement(h,i({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},172:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return p},default:function(){return u}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],l={id:"network-monitoring",title:"Monitoring of network conditions",sidebar_label:"Network Monitoring",sidebar_position:5,slug:"/design/network-monitoring",partners:["rwth","uos"]},s=void 0,c={unversionedId:"design/network-monitoring",id:"design/network-monitoring",title:"Monitoring of network conditions",description:"Facts",source:"@site/docs/design/network-monitoring.md",sourceDirName:"design",slug:"/design/network-monitoring",permalink:"/docs/design/network-monitoring",editUrl:"https://github.com/ERIGrid2/riasc/edit/master/docs/design/network-monitoring.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{id:"network-monitoring",title:"Monitoring of network conditions",sidebar_label:"Network Monitoring",sidebar_position:5,slug:"/design/network-monitoring",partners:["rwth","uos"]},sidebar:"docs",previous:{title:"Network Emulation",permalink:"/docs/design/network-emulation"},next:{title:"PSAL Code Generation",permalink:"/docs/design/code-generation"}},p=[{value:"Facts",id:"facts",children:[],level:2},{value:"Introduction",id:"introduction",children:[{value:"Collected Metrics",id:"collected-metrics",children:[],level:3}],level:2},{value:"Employed technologies",id:"employed-technologies",children:[],level:2},{value:"Architecture",id:"architecture",children:[],level:2},{value:"Implementation details",id:"implementation-details",children:[],level:2},{value:"Further reading",id:"further-reading",children:[],level:2}],d={toc:p};function u(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"facts"},"Facts"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Source Code:")," ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/ERIGrid2/k8s-netmon"},"https://github.com/ERIGrid2/k8s-netmon")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Helm Chart:")," ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/ERIGrid2/charts/tree/master/charts/flent"},"https://github.com/ERIGrid2/charts/tree/master/charts/flent")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"State:")," to be implemented")),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"The ",(0,o.kt)("em",{parentName:"p"},"k8s-netmon")," component periodically performs network tests to measure letency and bandwidth between each and every node in the RIasC cloud.\nThe gathered measurements are then used to construct graph in wich the vertices represent the nodes and edges are annotated with the measurements."),(0,o.kt)("h3",{id:"collected-metrics"},"Collected Metrics"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Connectivity"),(0,o.kt)("li",{parentName:"ul"},"Latency"),(0,o.kt)("li",{parentName:"ul"},"Bandwidth")),(0,o.kt)("h2",{id:"employed-technologies"},"Employed technologies"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://flent.org/"},"Flent")),(0,o.kt)("li",{parentName:"ul"},"Kubernetes:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/"},"Custom Resources"))))),(0,o.kt)("h2",{id:"architecture"},"Architecture"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"k8s-netmon")," runs a Kubernetes controller which watches ",(0,o.kt)("em",{parentName:"p"},"TestSchedule")," custom resources (CR)s.\nBased on ",(0,o.kt)("em",{parentName:"p"},"TestSchedules")," CRs the controller will spawn ",(0,o.kt)("em",{parentName:"p"},"DaemonSets")," to execute individual test runs between a pair of nodes.\nThe ",(0,o.kt)("inlineCode",{parentName:"p"},"k8s-netmon")," controller will take care that ",(0,o.kt)("em",{parentName:"p"},"TestSchedules")," are not executed simultaneously to avoid interference between the tests."),(0,o.kt)("p",null,"The actual network tests are performed by ",(0,o.kt)("a",{parentName:"p",href:"https://flent.org/"},"Flent"),", the Flexible network tester.\nThe ",(0,o.kt)("inlineCode",{parentName:"p"},"k8s-netmon")," controller spawns pairs of Flent pods on different nodes within the cluster.\nThese pods will execute the Flent container image. One of them will act as a server while the other acts as the client.\nThe lifetime of these pods is short. They exist only for the duration of the test.\nFlent stores its results in archives which will be uploaded to a S3 object storage which they can be downloaded for subsequent analysis."),(0,o.kt)("p",null,"The user should be supported in analysis of the collected data by a Python package which downloads the collected test results from the S3 object storage.\nThis Python package can also directly unpack and load the test results using appropriate packages like Pandas and perform visuzations with matplotlib."),(0,o.kt)("p",null,"In addition, most recent measurments (e.g. ICMP ping RTT) can be stored in a Promtheus time-series database for monitoring.\nA dedicated Grafana instance is deployed in the cluster itself and can then be used to visualize the collected metrics."),(0,o.kt)("p",null,"A dedicated Python program ",(0,o.kt)("inlineCode",{parentName:"p"},"k8s-netmon-graph")," is used to retrieve the measurements from Promtheus and converts them into several different graph represenations for further processing:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Graphviz Dot file"),(0,o.kt)("li",{parentName:"ul"},"Rendered SVG graph"),(0,o.kt)("li",{parentName:"ul"},"GraphML",(0,o.kt)("sup",{parentName:"li",id:"fnref-3"},(0,o.kt)("a",{parentName:"sup",href:"#fn-3",className:"footnote-ref"},"3")))),(0,o.kt)("p",null,"For this purpose ",(0,o.kt)("inlineCode",{parentName:"p"},"k8s-netmon-graph")," implements a simple HTTP API.\nThe rendered version of the graph is also embedded as an SVG graphic into the Grafana dashboard."),(0,o.kt)("p",null,"For precise one-way delay measurements the accuracy of the system clocks is essential.\nTo increase the accuracy of the clocks, a dedicated component"),(0,o.kt)("h2",{id:"implementation-details"},"Implementation details"),(0,o.kt)("h2",{id:"further-reading"},"Further reading"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"https://flent.org/"},"Flent"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"https://github.com/simonswine/kube-latency"},"kube-latency"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"https://medium.com/flant-com/ping-monitoring-between-kubernetes-nodes-11e815f4eff1"},"https://medium.com/flant-com/ping-monitoring-between-kubernetes-nodes-11e815f4eff1"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"https://github.com/redlab-i/pps-tools"},"pps-tools"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/"},"Kubernetes DaemonSet")))),(0,o.kt)("div",{className:"footnotes"},(0,o.kt)("hr",{parentName:"div"}),(0,o.kt)("ol",{parentName:"div"},(0,o.kt)("li",{parentName:"ol",id:"fn-3"},(0,o.kt)("a",{parentName:"li",href:"http://graphml.graphdrawing.org/about.html"},"http://graphml.graphdrawing.org/about.html"),(0,o.kt)("a",{parentName:"li",href:"#fnref-3",className:"footnote-backref"},"\u21a9")))))}u.isMDXComponent=!0}}]);