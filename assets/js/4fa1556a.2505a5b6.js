"use strict";(self.webpackChunkriasc=self.webpackChunkriasc||[]).push([[2533],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return m}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),c=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=c(r),m=a,f=d["".concat(p,".").concat(m)]||d[m]||s[m]||i;return r?n.createElement(f,l(l({ref:t},u),{},{components:r})):n.createElement(f,l({ref:t},u))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,l=new Array(i);l[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var c=2;c<i;c++)l[c]=r[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},5691:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return o},contentTitle:function(){return p},metadata:function(){return c},toc:function(){return u},default:function(){return d}});var n=r(7462),a=r(3366),i=(r(7294),r(3905)),l=["components"],o={id:"time-sync",title:"Time Synchronization",sidebar_label:"Time Synchronization",slug:"/usage/time-sync"},p=void 0,c={unversionedId:"usage/time-sync",id:"usage/time-sync",title:"Time Synchronization",description:"Requriements",source:"@site/docs/usage/time-sync.md",sourceDirName:"usage",slug:"/usage/time-sync",permalink:"/docs/usage/time-sync",editUrl:"https://github.com/ERIGrid2/riasc/edit/master/docs/usage/time-sync.md",tags:[],version:"current",frontMatter:{id:"time-sync",title:"Time Synchronization",sidebar_label:"Time Synchronization",slug:"/usage/time-sync"},sidebar:"docs",previous:{title:"Rancher Interface",permalink:"/docs/usage/rancher"},next:{title:"Overview",permalink:"/docs/examples"}},u=[{value:"Requriements",id:"requriements",children:[],level:2},{value:"Setup",id:"setup",children:[],level:2},{value:"Configuration",id:"configuration",children:[{value:"Configuring Linux PPS device on Raspberry Pi",id:"configuring-linux-pps-device-on-raspberry-pi",children:[],level:3}],level:2}],s={toc:u};function d(e){var t=e.components,r=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"requriements"},"Requriements"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"1x GPS receiver module with PPS output",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Options:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.digikey.com/en/products/detail/adafruit-industries-llc/746/5353613"},"Adafruit Ultimate GPS Breakout, Digikey")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://store.uputronics.com/index.php?route=product/product&path=60_64&product_id=81"},"Raspberry Pi Hat, Uputronics")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://de.rs-online.com/web/p/raspberry-pi-hats-und-add-ons/1245481/?cm_mmc=de-ds-_-web-_-ds%3Adiscover-de%3Aall-technologies-de%3Araspberry-pi-de%3Aadd-gps-time-and-location-to-a-raspberry-pi-project-de_fp-_-1245481"},"Adafruit GPS Hat, RS-Online")))))),(0,i.kt)("li",{parentName:"ul"},"1x GPS antenna and cabeling (optional)")),(0,i.kt)("h2",{id:"setup"},"Setup"),(0,i.kt)("p",null,"For accurate network latency measurements the Raspberry Pi clock can be sychronized via GPS.\nFor this purpose a dedicated GPS receiver module with a dedicated pulse-per-second (PPS) output is required."),(0,i.kt)("p",null,"Connect the GPS receiver according to the following table:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Pin GPS Module"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Raspberry Pi P1 Header"),(0,i.kt)("th",{parentName:"tr",align:"left"},"BCM"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Direction"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"GND"),(0,i.kt)("td",{parentName:"tr",align:"left"},"6 (GND)"),(0,i.kt)("td",{parentName:"tr",align:"left"}),(0,i.kt)("td",{parentName:"tr",align:"left"})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"3.3V"),(0,i.kt)("td",{parentName:"tr",align:"left"},"1 (+3V3)"),(0,i.kt)("td",{parentName:"tr",align:"left"}),(0,i.kt)("td",{parentName:"tr",align:"left"})),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"RX"),(0,i.kt)("td",{parentName:"tr",align:"left"},"8"),(0,i.kt)("td",{parentName:"tr",align:"left"},"GPIO 14 / TXD0"),(0,i.kt)("td",{parentName:"tr",align:"left"},"RPi -> GPS")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"TX"),(0,i.kt)("td",{parentName:"tr",align:"left"},"10"),(0,i.kt)("td",{parentName:"tr",align:"left"},"GPIO 15 / RXD0"),(0,i.kt)("td",{parentName:"tr",align:"left"},"GPS -> RPi")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"PPS"),(0,i.kt)("td",{parentName:"tr",align:"left"},"12"),(0,i.kt)("td",{parentName:"tr",align:"left"},"GPIO 18"),(0,i.kt)("td",{parentName:"tr",align:"left"},"GPS -> RPi")))),(0,i.kt)("h2",{id:"configuration"},"Configuration"),(0,i.kt)("p",null,"The time synchronzation is configured via the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/ERIGrid2/charts/tree/master/charts/time-sync"},"RIasC Helm chart"),"."),(0,i.kt)("p",null,"It is automatically enabled for all nodes."),(0,i.kt)("h3",{id:"configuring-linux-pps-device-on-raspberry-pi"},"Configuring Linux PPS device on Raspberry Pi"),(0,i.kt)("p",null,"The configuration of the PPS inputs on a Raspberry Pi is done by the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/ERIGrid2/riasc-ansible/tree/master/roles/rpi-gps-sync"},"RIasC Ansible playbook"),".\nIt will be applied to all Raspberry Pi based nodes."))}d.isMDXComponent=!0}}]);