"use strict";(self.webpackChunkriasc=self.webpackChunkriasc||[]).push([[6827],{3905:function(e,n,r){r.d(n,{Zo:function(){return p},kt:function(){return f}});var t=r(67294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function a(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=t.createContext({}),c=function(e){var n=t.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):a(a({},n),e)),r},p=function(e){var n=c(e.components);return t.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(r),f=o,m=d["".concat(s,".").concat(f)]||d[f]||u[f]||i;return r?t.createElement(m,a(a({ref:n},p),{},{components:r})):t.createElement(m,a({ref:n},p))}));function f(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var c=2;c<i;c++)a[c]=r[c];return t.createElement.apply(null,a)}return t.createElement.apply(null,r)}d.displayName="MDXCreateElement"},54327:function(e,n,r){r.r(n),r.d(n,{assets:function(){return p},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return u}});var t=r(87462),o=r(63366),i=(r(67294),r(3905)),a=["components"],l={id:"network-emulation",title:"Network Emulation",sidebar_label:"Network Emulation",slug:"/usage/network-emulation"},s=void 0,c={unversionedId:"usage/network-emulation",id:"usage/network-emulation",title:"Network Emulation",description:"Introduction",source:"@site/docs/usage/network-emulation.md",sourceDirName:"usage",slug:"/usage/network-emulation",permalink:"/riasc/docs/usage/network-emulation",editUrl:"https://github.com/ERIGrid2/riasc/edit/master/docs/usage/network-emulation.md",tags:[],version:"current",frontMatter:{id:"network-emulation",title:"Network Emulation",sidebar_label:"Network Emulation",slug:"/usage/network-emulation"},sidebar:"docs",previous:{title:"Basic",permalink:"/riasc/docs/usage/basic"},next:{title:"Network Monitoring",permalink:"/riasc/docs/usage/network-monitoring"}},p={},u=[{value:"Introduction",id:"introduction",level:2},{value:"Prerequisite",id:"prerequisite",level:2},{value:"TrafficProfile configuration",id:"trafficprofile-configuration",level:2},{value:"TrafficProfile for Flexe",id:"trafficprofile-for-flexe",level:3},{value:"Usage",id:"usage",level:2}],d={toc:u};function f(e){var n=e.components,r=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,t.Z)({},d,r,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"These instructions gives the user more information how to use network emulation within specific pods. "),(0,i.kt)("h2",{id:"prerequisite"},"Prerequisite"),(0,i.kt)("p",null,"There is need to have some preparation ready before the network emulation will work. The important part is the mutating webhook installed to the Kubernetes. The examples can be found from repo ",(0,i.kt)("a",{parentName:"p",href:"mailto:git@github.com"},"git@github.com"),":ERIGrid2/k8s-netem.git and especially the directories of scripts and kubernetes inside that repository. "),(0,i.kt)("p",null,"Here are the needed commands when you are at root directory of k8s-netem repository. There might be needed to finetune aliases in scripts/dev.sh file for you environment:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"# Install aliases for running bash session\nsource scripts/dev.sh\n\n# Create a new namespace for riasc system\nkubectl create ns riasc-system\n\n# Create self-signed certificate for mutating webhook\ncreate-webhook-cert\n\n# Build k8s-netem Docker image\nbuild-image\n\n# This part depends on your Docker image repository \n\n# Add custom resource description for TrafficProfile resources\nkubectl apply -f kubernetes/crd.yaml\n\n# Register mutating webhook\nkubectl -n riasc-system apply -f kubernetes/rbac.yaml\nkubectl -n riasc-system apply -f kubernetes/deployment.yaml\nkubectl -n riasc-system apply -f kubernetes/service.yaml\nkubectl apply -f kubernetes/webhook.yaml\n")),(0,i.kt)("h2",{id:"trafficprofile-configuration"},"TrafficProfile configuration"),(0,i.kt)("h3",{id:"trafficprofile-for-flexe"},"TrafficProfile for Flexe"),(0,i.kt)("p",null,'The below is one example for TrafficProfile configuration when used with Flexe traffic Emulator controller. This example describe TrafficProfile named "profile-flexe", which selects pod(s) with traffic-profile "profile-delay-jitter-flexe", has several specified netEm profiles: "ethernet", "3g" and "gprs", and every profile is running at specified times (runTime variable) and when all the profiles are run, then repeat the order again ("segments" -> repeat: true). There is also filtering configuration for egress interface gre1 ("interfaceFilter: gre1"), which filters packets destinated to "1.1.1.1/32" and using ports "443/TCP" or "53/UDP" and pods with the label "example". Another filter is using packets destinated to "8.8.8.8/32" and port "80/TCP". When packets destinated to those filtered destinations and ports, then this TrafficProfile is used for emulating network conditions.'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"---\napiVersion: k8s-netem.riasc.eu/v1\nkind: TrafficProfile\nmetadata:\nname: profile-flexe\nspec:\ninterfaceFilter: gre1\n\npodSelector:\n    matchLabels:\n    traffic-profile: profile-delay-jitter-flexe\n\ntype: Flexe\n\nparameters:\n    segments:\n    - repeat: true\n\n    profiles:\n    - name: ethernet\n    parameters:\n        runTime: 30\n\n        bandwidthUp: 100000\n        bandwidthDown: 100000\n        delay: 0.25\n        delayVariation: 0.25\n        delayCorrelation: 0\n        loss: 0\n        lossCorrelation: 0\n        duplication: 0\n        corruption: 0\n        reorder: 0\n        reorderCorrelation: 0\n\n    - name: 3g\n    parameters:\n        runTime: 30\n\n        bandwidthUp: 256\n        bandwidthDown: 256\n        delay: 200\n        delayVariation: 50\n        delayCorrelation: 0\n        loss: 0.5\n        lossCorrelation: 0\n        duplication: 0.1\n        corruption: 0.1\n        reorder: 0.2\n        reorderCorrelation: 0\n\n    - name: gprs\n    parameters:\n        bandwidthUp: 60\n        bandwidthDown: 60\n        delay: 350\n        delayVariation: 100\n        delayCorrelation: 0\n        loss: 0.5\n        lossCorrelation: 0\n        duplication: 0.1\n        corruption: 0.1\n        reorder: 0.2\n        reorderCorrelation: 0\n\n    - name: lte\n    parameters:\n        bandwidthUp: 5000\n        bandwidthDown: 15000\n        delay: 7.5\n        delayVariation: 5\n        delayCorrelation: 0\n        loss: 0.025\n        lossCorrelation: 0\n        duplication: 0\n        corruption: 0\n        reorder: 0\n        reorderCorrelation: 0\n\n    - name: xdsl\n    parameters:\n        bandwidthUp: 2000\n        bandwidthDown: 15000\n        delay: 7.5\n        delayVariation: 2.5\n        delayCorrelation: 0\n        loss: 0\n        lossCorrelation: 0\n        duplication: 0\n        corruption: 0\n        reorder: 0\n        reorderCorrelation: 0\n\negress:\n- to:\n    - ipBlock:\n        cidr: 1.1.1.1/32\n\n    - podSelector:\n        matchLabels:\n        component: example\n\n    ports:\n    - port: 443\n    protocol: TCP\n    - port: 53\n    protocol: UDP\n\n- to:\n    - ipBlock:\n        cidr: 8.8.8.8/32\n\n- ports:\n    - port: 80\n    protocol: tcp\n")),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("p",null,"When the modifications are done to file kubernetes/example/profile-flexe.yaml, then load that to the Kubernetes cluster. After that load also example deployment configuration (see kubernetes/example/deployment.yaml file). "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"source scripts/dev.sh\n\nkubectl create ns my-app\n\n# Create the example deployment and profile only for the first time\nkubectl -n my-app apply -f kubernetes/example/profile-flexe.yaml\nkubectl -n my-app apply -f kubernetes/example/deployment.yaml\n\n# Rebuild k8s-netem Docker image and restart example deployment\nexample-run\n\n# Use the following commands to inspect the logs of the example deployment and webhook\nwebhook-logs\nsidecar-logs\nexample-logs ping-cloudflare\nexample-logs ping-google\n")))}f.isMDXComponent=!0}}]);