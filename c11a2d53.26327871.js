(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{109:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),d=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=d(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=d(n),b=r,m=p["".concat(i,".").concat(b)]||p[b]||u[b]||o;return n?a.a.createElement(m,s(s({ref:t},l),{},{components:n})):a.a.createElement(m,s({ref:t},l))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=b;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},96:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return d}));var r=n(3),a=n(7),o=(n(0),n(109)),i={id:"ip-overlay",title:"Transparent IP Overlay Network",sidebar_label:"Overlay Network",slug:"/design/ip-overlay",partners:["rwth"]},s={unversionedId:"design/ip-overlay",id:"design/ip-overlay",isDocsHomePage:!1,title:"Transparent IP Overlay Network",description:"Facts",source:"@site/docs/design/ip-overlay.md",slug:"/design/ip-overlay",permalink:"/riasc/docs/design/ip-overlay",editUrl:"https://github.com/ERIGrid2/riasc/edit/master/docs/design/ip-overlay.md",version:"current",sidebar_label:"Overlay Network",sidebar:"docs",previous:{title:"Further Reading",permalink:"/riasc/docs/further-reading"},next:{title:"IP-Gateway/NAT for cluster-external devices",permalink:"/riasc/docs/design/ip-gateway"}},c=[],l={toc:c};function d(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h1",{id:"facts"},"Facts"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"Git Repo:")," ",Object(o.b)("a",{parentName:"li",href:"https://github.com/ERIGrid2/charts/tree/master/charts/riasc"},"https://github.com/ERIGrid2/charts/tree/master/charts/riasc")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"State:")," to be implemented")),Object(o.b)("h1",{id:"introduction"},"Introduction"),Object(o.b)("p",null,"Unlike in traditional cloud deployments, the participating agent nodes are usually not residing in the same network.\nAs a consequence, direct communication between containers deployed on different agent nodes is not possible.\nTo solve this restriction a transparent overlay network is established between all agend and master nodes.\nThis overlay network employs Virtual Private Network (VPN) solutions to create a mesh of peer-to-peer connections between all nodes in the cloud.\nWithin this overlay network all deployed containers are assigned an IP from the cluster internat subnet (usually) ",Object(o.b)("inlineCode",{parentName:"p"},"10.42.0.0/16"),").\nContainers can use these addresses (and also Kubernetes ClusterIPs) to communicate with each other even if they are deployed on different nodes in different sites."),Object(o.b)("p",null,"As the overlay network establishes connectivty between all nodes.\nThe Kubernetes cluster networks can be used as on any other Kubernetes cluster.\nHowever, its important to note that the overlay network only establishes connectivity between IPs/containers within the cluster.\nConnecting devices and services outside the cluster (e.g. in a dedicated laboratory network) is not supported by the overlay network.\nFor this purpose a dedicated component, the ",Object(o.b)("a",{parentName:"p",href:"/riasc/docs/design/ip-gateway"},"IP gateway")," is used."),Object(o.b)("h1",{id:"employed-technologies"},"Employed technologies"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Wireguard"),Object(o.b)("li",{parentName:"ul"},"Kilo")),Object(o.b)("h1",{id:"architecture"},"Architecture"),Object(o.b)("p",null,"The IP overlay network is implemented by a tool named ",Object(o.b)("em",{parentName:"p"},"Kilo"),".\nKilo is a multi-cloud network overlay built on WireGuard and designed for Kubernetes.\nIt deploys the ",Object(o.b)("inlineCode",{parentName:"p"},"kg")," daemon as Kubernetes DaemonSet on each node in the RIasC cloud.\nThe ",Object(o.b)("inlineCode",{parentName:"p"},"kg")," daemon completely automates the configuration of each VPN service by facilitating the exchange of keys and endpoints."),Object(o.b)("h1",{id:"implementation-details"},"Implementation details"),Object(o.b)("h1",{id:"further-reading"},"Further Reading"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"https://github.com/squat/kilo"},"Kilo"),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"https://wireguard.com/"},"Wireguard")))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"https://www.jordanwhited.com/posts/wireguard-endpoint-discovery-nat-traversal/"},"Jordan Whited: WireGuard Endpoint Discovery and NAT Traversal using DNS-SD")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",{parentName:"li",href:"https://tailscale.com/blog/how-nat-traversal-works/"},"David Anderson: How NAT traversal works, Tailscale"))))}d.isMDXComponent=!0}}]);