(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{112:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return f}));var r=n(0),i=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=i.a.createContext({}),p=function(e){var t=i.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=p(e.components);return i.a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},b=i.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,a=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(n),b=r,f=u["".concat(a,".").concat(b)]||u[b]||d[b]||o;return n?i.a.createElement(f,c(c({ref:t},l),{},{components:n})):i.a.createElement(f,c({ref:t},l))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=b;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,a[1]=c;for(var l=2;l<o;l++)a[l]=n[l];return i.a.createElement.apply(null,a)}return i.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},91:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return a})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return p}));var r=n(3),i=n(7),o=(n(0),n(112)),a={id:"config",title:"Configuration File",sidebar_label:"Configuration",slug:"/setup/config"},c={unversionedId:"setup/config",id:"setup/config",isDocsHomePage:!1,title:"Configuration File",description:"Each RIasC agent node can be configured by a YAML configuration file.",source:"@site/docs/setup/config.md",slug:"/setup/config",permalink:"/docs/setup/config",editUrl:"https://github.com/ERIGrid2/riasc/edit/master/docs/setup/config.md",version:"current",sidebar_label:"Configuration",sidebar:"docs",previous:{title:"Cloud-init",permalink:"/docs/setup/agent/cloud-init"},next:{title:"Usage",permalink:"/docs/usage"}},s=[{value:"Location",id:"location",children:[]},{value:"Example",id:"example",children:[]}],l={toc:s};function p(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Each RIasC agent node can be configured by a ",Object(o.b)("a",{parentName:"p",href:"https://yaml.org/"},"YAML")," configuration file.\nThis configuration file is used by the agent node to register itself in the RIasC cloud."),Object(o.b)("h2",{id:"location"},"Location"),Object(o.b)("p",null,"For ",Object(o.b)("a",{parentName:"p",href:"/docs/setup/agent/rpi"},"Raspberry Pi-based installations")," the configuration file must be placed at ",Object(o.b)("inlineCode",{parentName:"p"},"/boot/riasc.yaml")," or the ",Object(o.b)("inlineCode",{parentName:"p"},"boot")," drive when the SD card is mounted in Windows."),Object(o.b)("p",null,"For ",Object(o.b)("a",{parentName:"p",href:"/docs/setup/agent/manual"},"manual installations")," via the script expect the configuration file named ",Object(o.b)("inlineCode",{parentName:"p"},"riasc.yaml")," in the current working directory."),Object(o.b)("p",null,"For ",Object(o.b)("a",{parentName:"p",href:"/docs/setup/agent/cloud-init"},"cloud-init installations")," the contents of configuration file must be provided as instance metadata](",Object(o.b)("a",{parentName:"p",href:"https://cloudinit.readthedocs.io/en/latest/topics/instancedata.html"},"https://cloudinit.readthedocs.io/en/latest/topics/instancedata.html"),")."),Object(o.b)("h2",{id:"example"},"Example"),Object(o.b)("p",null,"The latest example configuration can be found ",Object(o.b)("a",{parentName:"p",href:"https://github.com/ERIGrid2/riasc-provisioning/blob/master/riasc.yaml"},"in the provisioning repo"),"."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-yaml"},"# A unique hostname to identify the node\nhostname: rpi-test1 # changeme!\n\nansible:\n\n  # A repository containing ansible playbooks which will be fetched via ansible-pull\n  url: https://github.com/erigrid2/k3s-ansible.git\n\n  # The playbook which should be provision the node\n  playbook: site.yml\n\n  # A path to the Ansible inventory within the repo from above\n  inventory: inventory/erigrid/hosts.yml\n\n#   extra_args:\n#   - --only-if-changed\n\n  # Additional variables which are passed to the Ansible playbook for provisioning\n  variables:\n\n    # The URL of a K3S master provided by your RIasC provider\n    server: https://riasc.fein-aachen.org # changeme!\n\n    # Replace this token with the token provided by your RIasC provider\n    token: XXXXX # changeme!\n")))}p.isMDXComponent=!0}}]);