(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{111:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var b=a.a.createContext({}),s=function(e){var t=a.a.useContext(b),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return a.a.createElement(b.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,b=o(e,["components","mdxType","originalType","parentName"]),p=s(n),d=r,m=p["".concat(c,".").concat(d)]||p[d]||u[d]||i;return n?a.a.createElement(m,l(l({ref:t},b),{},{components:n})):a.a.createElement(m,l({ref:t},b))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,c=new Array(i);c[0]=d;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:r,c[1]=l;for(var b=2;b<i;b++)c[b]=n[b];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},82:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return o})),n.d(t,"default",(function(){return s}));var r=n(3),a=n(7),i=(n(0),n(111)),c={id:"time-sync",title:"Time Synchronization",sidebar_label:"Time Synchronization",slug:"/usage/time-sync"},l={unversionedId:"usage/time-sync",id:"usage/time-sync",isDocsHomePage:!1,title:"Time Synchronization",description:"This guide describes the steps to setup time-synchronization for embbeded single-board computers (SBCs) such as a Raspberry Pi.",source:"@site/docs/usage/time-sync.md",slug:"/usage/time-sync",permalink:"/riasc/docs/usage/time-sync",editUrl:"https://github.com/ERIGrid2/riasc/edit/master/docs/usage/time-sync.md",version:"current",sidebar_label:"Time Synchronization",sidebar:"docs",previous:{title:"Rancher Web Interface",permalink:"/riasc/docs/usage/rancher"},next:{title:"Examples",permalink:"/riasc/docs/examples"}},o=[{value:"Applications",id:"applications",children:[]},{value:"Synchronization sources",id:"synchronization-sources",children:[]},{value:"Functional Requirements",id:"functional-requirements",children:[]},{value:"Requriements",id:"requriements",children:[]},{value:"Setup",id:"setup",children:[]},{value:"Configuration",id:"configuration",children:[{value:"Configuring Linux PPS device on Raspberry Pi",id:"configuring-linux-pps-device-on-raspberry-pi",children:[]}]},{value:"Testing",id:"testing",children:[]},{value:"Links",id:"links",children:[]}],b={toc:o};function s(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"This guide describes the steps to setup time-synchronization for embbeded single-board computers (SBCs) such as a Raspberry Pi.\nThe time-synchronization relies on a comodity GPS module providing a pulse-per-second (PPS) output to a GPIO pin of the SBC."),Object(i.b)("h2",{id:"applications"},"Applications"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Time-delay compensation"),Object(i.b)("li",{parentName:"ul"},"Logging/timestamping/tracing of interface signals"),Object(i.b)("li",{parentName:"ul"},"Network monitoring")),Object(i.b)("h2",{id:"synchronization-sources"},"Synchronization sources"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"PPS (kernel PPS features, fallback to SW)"),Object(i.b)("li",{parentName:"ol"},"GPSd"),Object(i.b)("li",{parentName:"ol"},"PTP"),Object(i.b)("li",{parentName:"ol"},"NTP")),Object(i.b)("h2",{id:"functional-requirements"},"Functional Requirements"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Microsecond accuracy")),Object(i.b)("h2",{id:"requriements"},"Requriements"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"1x GPS receiver module with PPS output",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Options:",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"https://www.digikey.com/en/products/detail/adafruit-industries-llc/746/5353613"},"Adafruit Ultimate GPS Breakout, Digikey")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"https://store.uputronics.com/index.php?route=product/product&path=60_64&product_id=81"},"Raspberry Pi Hat, Uputronics")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"https://de.rs-online.com/web/p/raspberry-pi-hats-und-add-ons/1245481/?cm_mmc=de-ds-_-web-_-ds%3Adiscover-de%3Aall-technologies-de%3Araspberry-pi-de%3Aadd-gps-time-and-location-to-a-raspberry-pi-project-de_fp-_-1245481"},"Adafruit GPS Hat, RS-Online")))))),Object(i.b)("li",{parentName:"ul"},"1x GPS antenna and cabeling (optional)")),Object(i.b)("h2",{id:"setup"},"Setup"),Object(i.b)("p",null,"For accurate network latency measurements the Raspberry Pi clock can be sychronized via GPS.\nFor this purpose a dedicated GPS receiver module with a dedicated pulse-per-second (PPS) output is required."),Object(i.b)("p",null,"Connect the GPS receiver according to the following table:"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:"left"},"Pin GPS Module"),Object(i.b)("th",{parentName:"tr",align:"left"},"Raspberry Pi P1 Header"),Object(i.b)("th",{parentName:"tr",align:"left"},"BCM"),Object(i.b)("th",{parentName:"tr",align:"left"},"Direction"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"left"},"GND"),Object(i.b)("td",{parentName:"tr",align:"left"},"6 (GND)"),Object(i.b)("td",{parentName:"tr",align:"left"}),Object(i.b)("td",{parentName:"tr",align:"left"})),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"left"},"3.3V"),Object(i.b)("td",{parentName:"tr",align:"left"},"1 (+3V3)"),Object(i.b)("td",{parentName:"tr",align:"left"}),Object(i.b)("td",{parentName:"tr",align:"left"})),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"left"},"RX"),Object(i.b)("td",{parentName:"tr",align:"left"},"8"),Object(i.b)("td",{parentName:"tr",align:"left"},"GPIO 14 / TXD0"),Object(i.b)("td",{parentName:"tr",align:"left"},"RPi -> GPS")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"left"},"TX"),Object(i.b)("td",{parentName:"tr",align:"left"},"10"),Object(i.b)("td",{parentName:"tr",align:"left"},"GPIO 15 / RXD0"),Object(i.b)("td",{parentName:"tr",align:"left"},"GPS -> RPi")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:"left"},"PPS"),Object(i.b)("td",{parentName:"tr",align:"left"},"12"),Object(i.b)("td",{parentName:"tr",align:"left"},"GPIO 18"),Object(i.b)("td",{parentName:"tr",align:"left"},"GPS -> RPi")))),Object(i.b)("h2",{id:"configuration"},"Configuration"),Object(i.b)("p",null,"The time synchronzation is configured via the ",Object(i.b)("a",{parentName:"p",href:"https://github.com/ERIGrid2/charts/tree/master/charts/riasc/templates/time-sync"},"RIasC Helm chart"),".\nIt is automatically enabled for all nodes."),Object(i.b)("h3",{id:"configuring-linux-pps-device-on-raspberry-pi"},"Configuring Linux PPS device on Raspberry Pi"),Object(i.b)("p",null,"The configuration of the PPS inputs on a Raspberry Pi is done by the ",Object(i.b)("a",{parentName:"p",href:"https://github.com/ERIGrid2/riasc-ansible/tree/master/roles/rpi-gps-sync"},"RIasC Ansible playbook"),".\nIt will be applied to all Raspberry Pi based nodes."),Object(i.b)("h2",{id:"testing"},"Testing"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Local testing"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Two Raspberry Pis"),Object(i.b)("li",{parentName:"ul"},"Independent synchronization sources"),Object(i.b)("li",{parentName:"ul"},"Equal or different synchronization types"),Object(i.b)("li",{parentName:"ul"},"Produce periodic rising edge via GPIO"),Object(i.b)("li",{parentName:"ul"},"Use oscilloscope to measure time offset between edges"))),Object(i.b)("li",{parentName:"ol"},Object(i.b)("p",{parentName:"li"},"Reporting synchronization status between RIs"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"Retrieve sync status from Chrony")))),Object(i.b)("h2",{id:"links"},"Links"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"https://github.com/beta-tester/RPi-GPS-PPS-StratumOne"},"https://github.com/beta-tester/RPi-GPS-PPS-StratumOne"))))}s.isMDXComponent=!0}}]);